% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiNode.getNodeRanks.r
\name{multiNode.getNodeRanks}
\alias{multiNode.getNodeRanks}
\title{Generate the "adaptive walk" node rankings, starting from a given perturbed variable}
\usage{
multiNode.getNodeRanks(S, G, num.misses = NULL)
}
\arguments{
\item{S}{- A character vector of the node names for the subset of nodes you want to encode.}
}
\value{
ranks - A list of character vectors of node names in the order they were drawn by the
                probability diffusion algorithm, from each starting node in S.
}
\description{
This function calculates the node rankings starting from a given perturbed variable in a subset of variables in the background knowledge graph.
}
\examples{
# Read in any network via its adjacency matrix
tmp = matrix(1, nrow=100, ncol=100)
for (i in 1:100) {
  for (j in 1:100) {
    tmp[i, j] = rnorm(1, mean=0, sd=1)
  }
}
colnames(tmp) = sprintf("Compound\%d", 1:100)
ig = graph.adjacency(tmp, mode="undirected", weighted=TRUE, add.colnames="name")
V(ig)$name = tolower(V(ig)$name)
# Get node rankings for graph
G = vector(mode="list", length=length(V(ig)$name))
names(G) = V(ig)$name
S = names(G)[1:3]
ranks = multiNode.getNodeRanks(S, G)
}
\keyword{algorithm}
\keyword{diffusion}
\keyword{network}
\keyword{probability}
\keyword{walker}
