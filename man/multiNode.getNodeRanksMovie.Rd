% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiNode.getNodeRanksMovie.r
\name{multiNode.getNodeRanksMovie}
\alias{multiNode.getNodeRanksMovie}
\title{Capture the movement of the adaptive walk of the diffusion probability method.}
\usage{
multiNode.getNodeRanksMovie(S, ig, output_filepath, p1, thresholdDiff,
  num.misses = log2(length(G)), zoomIn = FALSE)
}
\arguments{
\item{S}{- The subset of variables, S, in a background graph, G.}

\item{ig}{- The igraph object associated with the network G.}

\item{output_filepath}{- The local directory at which you want still PNG images to be saved.}

\item{p1}{- The probability that is preferentially distributed between network nodes by the 
probability diffusion algorithm based solely on network connectivity. The remaining probability
(i.e., "p0") is uniformally distributed between network nodes, regardless of connectivity.}

\item{thresholdDiff}{- When the probability diffusion algorithm exchanges this amount (thresholdDiff)
or less between nodes, the algorithm returns up the call stack.}

\item{num.misses}{- The number of missteps allowed before a network walker truncates its walk.}

\item{zoomIn}{- Boolean. Delete nodes outside of node subset's order 1 neighborhood?. Default is FALSE.}
}
\value{
ranksByStartNode - a list object of node rankings Each element is based on a different startNode.
        Images are also generated in the output_directory specified.
}
\description{
Make a movie of the adaptive walk the diffusion probability method makes in search of a given patient's perturbed variables.
}
\examples{
# 7 node example network from Thistlethwaite et al., 2020.
adj_mat = rbind(c(0,2,1,0,0,0,0), # A
                c(2,0,1,0,0,0,0), # B
                c(1,0,0,1,0,0,0), # C
                c(0,0,1,0,2,0,0), # D
                c(0,0,0,2,0,2,1), # E
                c(0,0,0,1,2,0,1), # F
                c(0,0,0,0,1,1,0)  # G
                )
rownames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
colnames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
ig = graph.adjacency(as.matrix(adj_mat), mode="undirected", weighted=TRUE)
G=vector(mode="list", length=7)
G[1:length(G)] = 0
names(G) = c("A", "B", "C", "D", "E", "F", "G")
S = names(G)[sample(1:length(G), 3)]
multiNode.getNodeRanksMovie(S, ig, output_filepath = getwd(), p1=0.9, thresholdDiff=0.01)
}
