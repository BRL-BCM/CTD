% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mle.getPermN_memoryless.r
\name{mle.getPermN_memoryless}
\alias{mle.getPermN_memoryless}
\title{Generate the "adaptive walk" node permutations, starting from a given perturbed variable}
\usage{
mle.getPermN_memoryless(n, G, S = NULL, misses.thresh = NULL)
}
\arguments{
\item{n}{- The index (out of a vector of node names) of the permutation you want to calculate.}

\item{G}{- A list of probabilities with list names being the node names of the background graph.}

\item{S}{- A character vector of node names in the subset you want the network walker to find.}

\item{misses.thresh}{- The number of "misses" the network walker will tolerate before switched to fixed length codes for remaining nodes to be found.}
}
\value{
current_node_set - A character vector of node names in the order they were drawn by the probability diffusion algorithm.
}
\description{
This function calculates the node permutation starting from a given perturbed variable in a subset of variables in the background knowledge graph.
}
\examples{
# Look at main_CTD.r script for full analysis script: https://github.com/BRL-BCM/CTD.
# Get node permutations for graph
perms = list()
for (n in 1:length(G)) {
  print(sprintf("Generating node permutation starting with node \%s", names(G)[n]))
  perms[[n]] = mle.getPermN(n, G)
}
names(perms) = names(G)
}
\keyword{algorithm}
\keyword{diffusion}
\keyword{network}
\keyword{probability}
\keyword{walker}
