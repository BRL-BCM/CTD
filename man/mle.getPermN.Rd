% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mle.getPermN.r
\name{mle.getPermN}
\alias{mle.getPermN}
\title{Generate the "adaptive walk" node permutations, starting from a given perturbed variable}
\usage{
mle.getPermN(n, G)
}
\arguments{
\item{n}{- The index (out of a vector of metabolite names) of the permutation you want to calculate.}
}
\description{
This function calculates the node permutation starting from a given perturbed variable in a subset of variables in the background knowledge graph.
}
\examples{
# Read in any network via its adjacency matrix
tmp = as.matrix(read.table("adjacency_matrix.txt", sep="\\t", header=TRUE))
colnames(tmp) = rownames(tmp)
ig = graph.adjacency(tmp, mode="undirected", weighted=TRUE, add.colnames="name")
V(ig)$name = tolower(V(ig)$name)
adjacency_matrix = list(as.matrix(get.adjacency(ig, attr="weight")))  # Must have this declared as a GLOBAL variable!!!!!
p0=0.1  # 10\% of probability distributed uniformly
p1=0.9  # 90\% of probability diffused based on edge weights in networks
G = vector(mode="list", length=length(V(ig)$name))
names(G) = names(V(ig)$name)
perms = list()
for (n in 1:length(G)) {
    print(sprintf("Generating node permutation starting with node \%s", names(G)[n]))
    perms[[names(G)[n]]] = mle.getPermN(n, G)
}
}
\keyword{algorithm}
\keyword{diffusion}
\keyword{network}
\keyword{probability}
\keyword{walker}
