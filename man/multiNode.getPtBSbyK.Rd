% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiNode.getPtBSbyK.r
\name{multiNode.getPtBSbyK}
\alias{multiNode.getPtBSbyK}
\title{Generate patient-specific bitstrings from adaptive network walk.}
\usage{
multiNode.getPtBSbyK(S, ranks)
}
\arguments{
\item{S}{- A character vector of node names describing the node subset to be encoded.}

\item{ranks}{- The list of node ranks calculated over all possible nodes in S, starting with each node in subset of interest.}
}
\value{
pt.byK - a list of bitstrings, with the names of the list elements the node names of the encoded nodes
}
\description{
This function calculates the bitstrings (1 is a hit; 0 is a miss) associated with the adaptive network walk
made by the diffusion algorithm trying to find the variables in the encoded subset, given the background knowledge graph.
}
\examples{
# Get patient bitstrings for the first 4 patients in the Miller et al 2015 dataset.
data("Miller2015")
data_mx = Miller2015[-grep("x - ", rownames(data_mx)),grep("IEM", colnames(Miller2015))]
data_mx = data_mx[,c(1:4)]
# Look at the top 15 metabolites for each patient. 
kmx=15
topMets_allpts = c()
for (pt in 1:ncol(data_mx)) { topMets_allpts = c(topMets_allpts, rownames(data_mx)[order(abs(data_mx[,pt]), decreasing=TRUE)[1:kmx]]) }
topMets_allpts = unique(topMets_allpts)
# Pre-compute node ranks for all metabolites in topMets_allpts for faster calculations.
ranks = list()
for (n in 1:length(topMets_allpts)) { ranks[n] = multiNode.getNodeRanksN(n, G, p1=0.9, thresholdDiff=0.01, adj_mat) }
names(ranks) = topMets_allpts
# Store each patient's bitstrings for each size k={1...kmx}.
ptBSbyK = list()
for (pt in 1:ncol(data_mx)) {
  S = rownames(data_mx)[order(abs(data_mx[,pt]), decreasing=TRUE)[1:kmx]]
  ptBSbyK[[ptID]] = multiNode.getPtBSByK(S, ranks)
}
}
