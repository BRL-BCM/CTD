% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/singleNode.getNodeRanksMovie.r
\name{singleNode.getNodeRanksMovie}
\alias{singleNode.getNodeRanksMovie}
\title{Capture the movement of the fixed, single-node walk of the diffusion probability method.}
\usage{
singleNode.getNodeRanksMovie(S, ig, output_filepath, p1, thresholdDiff,
  num.misses = NULL, zoomIn = FALSE)
}
\arguments{
\item{S}{- The subset of variables, S, in a background graph, G.}

\item{ig}{- The igraph object associated with the background knowledge graph.}

\item{output_filepath}{- The local directory at which you want still images to be saved.}

\item{p1}{- The probability that is preferentially distributed between network nodes by the 
probability diffusion algorithm based solely on network connectivity. The remaining probability
(i.e., "p0") is uniformally distributed between network nodes, regardless of connectivity.}

\item{thresholdDiff}{- When the probability diffusion algorithm exchanges this amount (thresholdDiff)
or less between nodes, the algorithm returns up the call stack.}

\item{num.misses}{- The number of missteps allowed before a network walker truncates its walk.}

\item{zoomIn}{- Boolean. Delete nodes outside of node subset's order 1 neighborhood?. Default is FALSE.}
}
\value{
ranksByStartNode - a list object of node rankings Each element is based on a different startNode.
        Images are also generated in the output_directory specified.
}
\description{
Make a movie of the fixed, single-node walk the diffusion probability method makes in search of a given patient's perturbed variables.
}
\examples{
# Read in any network via its adjacency matrix
adj_mat = matrix(1, nrow=100, ncol=100)
for (i in 1:100) {for (j in 1:100) { adj_mat[i, j] = rnorm(1, mean=0, sd=1)} }
colnames(adj_mat) = sprintf("Compound\%d", 1:100)
ig = graph.adjacency(adj_mat, mode="undirected", weighted=TRUE, add.colnames="name")
V(ig)$name = tolower(V(ig)$name)
G = vector(mode="list", length=length(V(ig)$name))
names(G) = V(ig)$name
S = names(G)[sample(1:length(G), 3)]
singleNode.getNodeRanksMovie(S, ig, output_filepath = getwd(), p1=0.9, thresholdDiff=0.01)
}
