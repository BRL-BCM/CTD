% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/singleNode.getNodeRanksN.r
\name{singleNode.getNodeRanksN}
\alias{singleNode.getNodeRanksN}
\title{Generate the fixed , single-node diffusion node rankings, starting from a given perturbed variable.}
\usage{
singleNode.getNodeRanksN(n, G, S = NULL, num.misses = NULL,
  verbose = FALSE)
}
\arguments{
\item{n}{- The index (out of a vector of node names) of the node ranking you want to calculate.}

\item{G}{- A list of probabilities with list names being the node names of the background graph.}

\item{S}{- A character vector of node names in the subset you want the network walker to find.}

\item{num.misses}{- The number of "misses" the network walker will tolerate before switching to fixed length codes for remaining nodes to be found.}

\item{verbose}{- If TRUE, print statements will execute as progress is made. Default is FALSE.}
}
\value{
current_node_set - A character vector of node names in the order they were drawn by the probability diffusion algorithm.
}
\description{
This function calculates the node rankings starting from a given perturbed variable in a subset of variables in the background knowledge graph.
}
\examples{
# Get node rankings for graph
ranks = list()
for (n in 1:length(G)) {
  print(sprintf("Generating node rankings starting with node \%s", names(G)[n]))
  ranks[[n]] = singleNode.getNodeRanksN(n, G)
}
names(ranks) = names(G)
}
\keyword{diffusion}
\keyword{network}
\keyword{probability}
\keyword{walker}
