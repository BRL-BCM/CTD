% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/singleNode.getNodeRanksN.r
\name{singleNode.getNodeRanksN}
\alias{singleNode.getNodeRanksN}
\title{Generate the fixed , single-node diffusion node rankings, starting from a given perturbed variable.}
\usage{
singleNode.getNodeRanksN(n, G, p1, thresholdDiff, adj_mat, S = NULL,
  num.misses = NULL, verbose = FALSE)
}
\arguments{
\item{n}{- The index (out of a vector of node names) of the node ranking you want to calculate.}

\item{G}{- A list of probabilities with list names being the node names of the background graph.}

\item{p1}{- The probability that is preferentially distributed between network nodes by the 
probability diffusion algorithm based solely on network connectivity. The remaining probability
(i.e., "p0") is uniformally distributed between network nodes, regardless of connectivity.}

\item{thresholdDiff}{- When the probability diffusion algorithm exchanges this amount (thresholdDiff)
or less between nodes, the algorithm returns up the call stack.}

\item{adj_mat}{- The adjacency matrix that encodes the edge weights for the network, G.}

\item{S}{- A character vector of node names in the subset you want the network walker to find.}

\item{num.misses}{- The number of "misses" the network walker will tolerate before switching to fixed length codes for remaining nodes to be found.}

\item{verbose}{- If TRUE, print statements will execute as progress is made. Default is FALSE.}
}
\value{
current_node_set - A character vector of node names in the order they were drawn by the probability diffusion algorithm.
}
\description{
This function calculates the node rankings starting from a given perturbed variable in a subset of variables in the background knowledge graph.
}
\examples{
data("Miller2015")
data_mx = Miller2015[-grep("x - ", rownames(Miller2015)), grep("IEM", colnames(Miller2015))]
# Build an adjacency matrix for network G
adj_mat = matrix(0, nrow=nrow(data_mx), ncol=nrow(data_mx))
rows = sample(1:ncol(adj_mat), 0.1*ncol(adj_mat))
cols = sample(1:ncol(adj_mat), 0.1*ncol(adj_mat))
for (i in rows) {for (j in cols) { adj_mat[i, j] = rnorm(1, mean=0, sd=1)} }
colnames(adj_mat) = rownames(data_mx)
rownames(adj_mat) = rownames(data_mx)
G = vector("numeric", length=ncol(adj_mat))
names(G)=colnames(adj_mat)
# Get node rankings for the first metabolite in network G. 
print(sprintf("Generating node rankings starting with node \%s", names(G)[n]))
ranks = singleNode.getNodeRanksN(1, G, p1=0.9, thresholdDiff=0.01, adj_mat)
}
\keyword{diffusion}
\keyword{network}
\keyword{probability}
\keyword{walker}
