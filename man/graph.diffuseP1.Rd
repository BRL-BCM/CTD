% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.diffuseP1.r
\name{graph.diffuseP1}
\alias{graph.diffuseP1}
\title{Diffuse Probability P1 from a starting node.}
\usage{
graph.diffuseP1(p1, startNode, G, visitedNodes, graphNumber = 1,
  verbose = FALSE)
}
\arguments{
\item{p1}{- The probability being dispersed from the starting node, startNode.}

\item{startNode}{- The first variable drawn in the adaptive permutation node sequence, from which p1 gets dispersed.}

\item{G}{- The igraph object associated with the background knowledge graph.}

\item{visitedNodes}{- The history of previous draws in the permutation sequence.}

\item{graphNumber}{- If testing against multiple background knowledge graphs, this is the index associated with the adjacency matrix that codes for G. Default value is 1.}

\item{verbose}{- If debugging or tracking a diffusion event, verbose=TRUE will activate print statements. Default is FALSE.}
}
\description{
Recursively diffuse probability from a starting node based on the connectivity of the background knowledge graph, representing the likelihood that a variable will be
        most influenced by a perturbation in the starting node.
}
\examples{
# Read in any network via its adjacency matrix
tmp = as.matrix(read.table("adjacency_matrix.txt", sep="\\t", header=TRUE))
colnames(tmp) = rownames(tmp)
ig = graph.adjacency(tmp, mode="undirected", weighted=TRUE, add.colnames="name")
V(ig)$name = tolower(V(ig)$name)
adjacency_matrix = list(as.matrix(get.adjacency(ig, attr="weight")))  # Must have this declared as a GLOBAL variable!!!!!

p0=0.1  # 10\% of probability distributed uniformly
p1=0.9  # 90\% of probability diffused based on edge weights in networks
G = vector(mode="list", length=length(V(ig)$name))
names(G) = names(V(ig)$name)
startNode = names(G)[1]
visitedNodes = NULL
probs_afterCurrDraw = graph.diffuseP1(p1, startNode, G, visitedNodes, 1)
}
\keyword{diffusion}
\keyword{event}
\keyword{generative}
\keyword{methods}
\keyword{network}
\keyword{walker}
