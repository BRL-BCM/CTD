% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.diffuseP1Movie.r
\name{graph.diffuseP1Movie}
\alias{graph.diffuseP1Movie}
\title{Make a movie of the diffusion of probability, P1, from a starting node.}
\usage{
graph.diffuseP1Movie(p1, startNode, G, visitedNodes, ig,
  recursion_level = 1, output_dir = getwd())
}
\arguments{
\item{p1}{- The probability being dispersed from the starting node, startNode.}

\item{startNode}{- The first variable drawn in the adaptive permutation node sequence, from which p1 gets dispersed.}

\item{G}{- A list of probabilities, with names of the list being the node names in the background knowledge graph.}

\item{visitedNodes}{- A character vector of node names, storing the history of previous draws in the permutation sequence.}

\item{graphNumber}{- If testing against multiple background knowledge graphs, this is the index associated with the adjacency matrix that codes for G. Default value is 1.}
}
\value{
G - A list of returned probabilities after the diffusion of probability has truncated, with names of the list being the node names in the background knowledge graph.
}
\description{
Recursively diffuse probability from a starting node based on the connectivity of the background knowledge graph, representing the likelihood that a variable will be
        most influenced by a perturbation in the starting node.
}
\examples{
# 7 node example graph from Figure 4 (Thistlethwaite, Elsea, Milosavljevic, 2019)
adj_mat = rbind(c(0,2,1,0,0,0,0), # A
                c(2,0,1,0,0,0,0), # B
                c(1,0,0,1,0,0,0), # C
                c(0,0,1,0,2,0,0), # D
                c(0,0,0,2,0,2,1), # E
                c(0,0,0,1,2,0,1), # F
                c(0,0,0,0,1,1,0)  # G
                )
rownames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
colnames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
ig = graph.adjacency(as.matrix(adj_mat), mode="undirected", weighted=TRUE)
G=vector(mode="list", length=7)
G[1:length(G)] = 0
names(G) = c("A", "B", "C", "D", "E", "F", "G")
startNode = "A"
visitedNodes = startNode
# Diffuse 100\% of probability from startNode "A"
p1 = 1.0
# Probability diffusion truncates at
thresholdDiff=0.01
coords = layout.fruchterman.reingold(ig)
V(ig)$x = coords[,1]
V(ig)$y = coords[,2]
# Global variable imgNum
imgNum=1
G_new = graph.diffuseP1Movie(p1, startNode, G, visitedNodes, ig, 1, getwd())
}
\keyword{diffusion}
\keyword{event}
\keyword{generative}
\keyword{methods}
\keyword{network}
\keyword{walker}
