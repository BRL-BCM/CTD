% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.diffuseP1Movie.r
\name{graph.diffuseP1Movie}
\alias{graph.diffuseP1Movie}
\title{Make a movie of the diffusion of probability, P1, from a starting node.}
\usage{
graph.diffuseP1Movie(p1, startNode, G, visitedNodes, ig,
  recursion_level = 1, output_dir = getwd())
}
\arguments{
\item{p1}{- The probability being dispersed from the starting node, startNode, which is preferentially distributed 
between network nodes by the probability diffusion algorithm based solely on network connectivity.}

\item{startNode}{- The first variable drawn in the node ranking, from which p1 gets dispersed.}

\item{G}{- A list of probabilities, with names of the list being the node names in the background knowledge graph.}

\item{visitedNodes}{- A character vector of node names, storing the history of previous draws in the node ranking.}

\item{thresholdDiff}{- When the probability diffusion algorithm exchanges this amount (thresholdDiff)
or less between nodes, the algorithm returns up the call stack.}

\item{adj_mat}{- The adjacency matrix that encodes the edge weights for the network, G.}
}
\value{
G - A list of returned probabilities after the diffusion of probability has truncated, with names of the list being the node names in the background knowledge graph.
}
\description{
Recursively diffuse probability from a starting node based on the connectivity of the background knowledge graph, representing the
likelihood that a variable will be most influenced by a perturbation in the starting node.
}
\examples{
# 7 node example graph illustrating diffusion of probability based on network connectivity
# from Thistlethwaite et al., 2020.
adj_mat = rbind(c(0,2,1,0,0,0,0), # A
                c(2,0,1,0,0,0,0), # B
                c(1,0,0,1,0,0,0), # C
                c(0,0,1,0,2,0,0), # D
                c(0,0,0,2,0,2,1), # E
                c(0,0,0,1,2,0,1), # F
                c(0,0,0,0,1,1,0)  # G
                )
rownames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
colnames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
ig = graph.adjacency(as.matrix(adj_mat), mode="undirected", weighted=TRUE)
G=vector(mode="list", length=7)
G[1:length(G)] = 0
names(G) = c("A", "B", "C", "D", "E", "F", "G")
startNode = "A"
visitedNodes = startNode
coords = layout.fruchterman.reingold(ig)
V(ig)$x = coords[,1]
V(ig)$y = coords[,2]
# Global variable imgNum
imgNum=1
G_new = graph.diffuseP1Movie(p1=1.0, startNode, G, visitedNodes, ig, thresholdDiff=0.01, adj_mat, getwd())
}
\keyword{diffusion}
\keyword{event}
\keyword{generative}
\keyword{methods}
\keyword{network}
\keyword{walker}
