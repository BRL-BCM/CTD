% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.hmSim.r
\name{plot.hmSim}
\alias{plot.hmSim}
\title{Generate heatmap plot of patient similarity matrix.}
\usage{
\method{plot}{hmSim}(simMat, path, diagnoses = NULL)
}
\arguments{
\item{simMat}{- The patient similarity matrix.}

\item{path}{- The filepath to a directory in which you want to store the .png file.}

\item{diagnoses}{- A character vector of diagnostic labels associated with the rownames of simMat.}
}
\description{
This function plots a heatmap of a patient similarity matrix.
}
\examples{
# Read in any network via its adjacency matrix
tmp = as.matrix(read.table("adjacency_matrix.txt", sep="\\t", header=TRUE))
colnames(tmp) = rownames(tmp)
ig = graph.adjacency(tmp, mode="undirected", weighted=TRUE, add.colnames="name")
V(ig)$name = tolower(V(ig)$name)
adjacency_matrix = list(as.matrix(get.adjacency(ig, attr="weight")))  # Must have this declared as a GLOBAL variable!!!!!
# Set other tuning parameters
p0=0.1  # 10\% of probability distributed uniformly
p1=0.9  # 90\% of probability diffused based on edge weights in networks
G = vector(mode="list", length=length(V(ig)$name))
names(G) = names(V(ig)$name)
# Get node permutations for graph
perms = list()
for (n in 1:length(G)) {
    print(sprintf("Generating node permutation starting with node \%s", names(G)[n]))
    perms[[names(G)[n]]] = mle.getPermN(n, G)
}
# Decide what the largest subset size you will consider will be
kmx = 20
# Load your patient data (p features as rows x n observations as columns)
# data_mx = read.table("/your/own/data.txt", sep="\\t", header=TRUE)
data(testData)
data_mx = testData
# Get bitstrings associated with each patient's top kmx variable subsets
ptBSbyK = list()
for (pt in 1:ncol(data_mx)) {
    ptID = colnames(data_mx)[pt]
    ptBSbyK[[ptID]] = mle.getPtBSbyK(data_mx, ptID, perms, kmx)
}
# Get patient distances
patientSim = matrix(NA, nrow=ncol(data_mx), ncol=ncol(data_mx))
rownames(patientSim) = colnames(data_mx)
colnames(patientSim) = colnames(data_mx)
for (pt in 1:ncol(data_mx)) {
    ptID = colnames(data_mx)[pt]
    for (pt2 in 1:ncol(data_mx)) {
        ptID2 = colnames(data_mx)[pt2]
        patientSim[ptID, ptID2] = mle.getPatientSimilarity(ptBSbyK[ptID], ptID, ptBSbyK[ptID2], data_mx)
    }
}
# if you have diagnostic labels associated with the colnames(data_mx), send them using diagnoses parameter
diagnoses = colnames(data_mx)
diagnoses[1:50] = "diseased"
diagnoses[51:100] = "neg_control"
plot.hmSim(patientSim, path=getwd(), diagnoses)
}
