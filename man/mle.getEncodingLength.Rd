% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mle.getEncodingLength.r
\name{mle.getEncodingLength}
\alias{mle.getEncodingLength}
\title{Minimum encoding length (MLE)}
\usage{
mle.getEncodingLength(bs, pvals, ptID)
}
\arguments{
\item{bs}{- A list of bitstrings associated with a given patient's perturbed variables.}

\item{pvals}{- The matrix that gives the perturbation strength significance for all variables (columns) for each patient (rows)}

\item{ptID}{- The row name in data.pvals corresponding to the patient you specifically want encoding information for.}
}
\description{
This function calculates the mininmum encoding length associated with a subset of variables given a background knowledge graph.
}
\examples{
# Read in any network via its adjacency matrix
tmp = as.matrix(read.table("adjacency_matrix.txt", sep="\\t", header=TRUE))
colnames(tmp) = rownames(tmp)
ig = graph.adjacency(tmp, mode="undirected", weighted=TRUE, add.colnames="name")
V(ig)$name = tolower(V(ig)$name)
adjacency_matrix = list(as.matrix(get.adjacency(ig, attr="weight")))  # Must have this declared as a GLOBAL variable!!!!!
# Set other tuning parameters
p0=0.1  # 10\% of probability distributed uniformly
p1=0.9  # 90\% of probability diffused based on edge weights in networks
G = vector(mode="list", length=length(V(ig)$name))
names(G) = names(V(ig)$name)
# Get node permutations for graph
perms = list()
for (n in 1:length(G)) {
    print(sprintf("Generating node permutation starting with node \%s", names(G)[n]))
    perms[[names(G)[n]]] = mle.getPermN(n, G)
}
# Decide what the largest subset size you will consider will be
kmx = 20
# Load your patient data (p features as rows x n observations as columns)
# data_mx = read.table("/your/own/data.txt", sep="\\t", header=TRUE)
data(testData)
data_mx = testData
# Get bitstrings associated with each patient's top kmx variable subsets
ptBSbyK = list()
for (pt in 1:ncol(data_mx)) {
    ptID = colnames(data_mx)[pt]
    ptBSbyK[[ptID]] = mle.getPtBSbyK(data_mx, ptID, perms, kmx)
}
# Identify the most significant subset per patient, given the background graph
data_mx.pvals = apply(data_mx, c(1,2), function(i) 2*pnorm(abs(i), lower.tail = FALSE))
for (pt in 1:ncol(data_mx)) {
    ptID = colnames(data_mx)[pt]
    res = mle.getEncodingLength(ptBSbyK[[ptID]], data_mx.pvals, ptID)
    res = res[which.max(res[,"d.score"]),]
    print(res)
}
}
\keyword{encoding}
\keyword{length}
\keyword{minimum}
