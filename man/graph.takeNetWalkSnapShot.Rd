% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.takeNetWalkSnapShot.r
\name{graph.takeNetWalkSnapShot}
\alias{graph.takeNetWalkSnapShot}
\title{Make a movie of the diffusion of probability, P1, from a starting node.}
\usage{
graph.takeNetWalkSnapShot(
  adj_mat,
  G,
  output_dir,
  p1,
  visitedNodes,
  S,
  imgNum = 1,
  useLabels = TRUE
)
}
\arguments{
\item{adj_mat}{- The adjacency matrix that encodes the edge weights for the network, G.}

\item{G}{- A list of probabilities, with names of the list being the node names in the background knowledge graph.}

\item{output_dir}{-  The local directory at which you want still PNG images to be saved.}

\item{p1}{- The probability being dispersed from the starting node, startNode, which is preferentially distributed 
between network nodes by the probability diffusion algorithm based solely on network connectivity.}

\item{visitedNodes}{- A character vector of node names, storing the history of previous draws in the node ranking.}

\item{S}{- A character vector of node names in the subset you want the network walker to find.}

\item{imgNum}{- The image number for this snapshot. If images are being generated in a sequence, this serves as
an iterator for file naming.}

\item{useLabels}{- If TRUE, node names will display next to their respective nodes in the network. If false
node names will not display.}
}
\value{
imgNum - The updated image count for the next image in the image-generated movie sequence.
}
\description{
Recursively diffuse probability from a starting node based on the connectivity of the background knowledge graph, representing the
likelihood that a variable will be most influenced by a perturbation in the starting node.
}
\examples{
# 7 node example graph illustrating diffusion of probability based on network connectivity
# from Thistlethwaite et al., 2020.
adj_mat = rbind(c(0,2,1,0,0,0,0), # A
                c(2,0,1,0,0,0,0), # B
                c(1,0,0,1,0,0,0), # C
                c(0,0,1,0,2,0,0), # D
                c(0,0,0,2,0,2,1), # E
                c(0,0,0,1,2,0,1), # F
                c(0,0,0,0,1,1,0)  # G
                )
rownames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
colnames(adj_mat) = c("A", "B", "C", "D", "E", "F", "G")
ig = graph.adjacency(as.matrix(adj_mat), mode="undirected", weighted=TRUE)
G=vector(mode="list", length=7)
G[seq_len(length(G))] = 0
names(G) = c("A", "B", "C", "D", "E", "F", "G")
S = c("A", "C")
visitedNodes = "A"
coords = layout.fruchterman.reingold(ig)
V(ig)$x = coords[,1]
V(ig)$y = coords[,2]
imgNum = graph.takeNetWalkSnapShot(adj_mat, G, output_dir=getwd(), p1=1.0, visitedNodes, S, imgNum=1, TRUE)
}
